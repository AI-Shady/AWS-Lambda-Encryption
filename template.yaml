AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Crypto Service

  Sample SAM Template for Crypto Service
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 29
    MemorySize: 1024
    Runtime: nodejs22.x
    Architectures:
      - arm64
    Environment:
      Variables:
        NODE_PATH: ./node_modules:/opt/nodejs/node_modules

Parameters:
  KMSKeyId:
    Type: String
    Description: The KMS Key ID to use for encryption and decryption
  ApiKeyValue:
    Type: String
    Description: The value for the API Key
    NoEcho: true  # Makes parameter value invisible in CloudFormation console

Resources:
  # API Gateway API definition
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: true  # Enable API Key validation
      EndpointConfiguration: 
        Type: REGIONAL
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  # API Key definition
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: ApiGatewayApiProdStage  # Ensure API is deployed before creating
    Properties:
      Enabled: true
      Name: crypto-service-api-key
      Value: !Ref ApiKeyValue
      Description: "API Key for Crypto Service"

  # Usage plan definition
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiGatewayApiProdStage  # Explicitly add dependency
    Properties:
      UsagePlanName: crypto-service-usage-plan
      Description: "Usage plan for Crypto Service"
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: Prod

  # Associate API Key with usage plan
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello/
      Handler: app.lambdaHandler
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /hello
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - app.ts

  # 加密函数
  EncryptFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: encrypt/
      Handler: index.lambdaHandler
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KMSKeyId
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      Policies:
        - KMSEncryptPolicy:
            KeyId: !Ref KMSKeyId
        - Statement:
            - Effect: Allow
              Action:
                - kms:GenerateDataKey
                - kms:Decrypt
              Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
      Events:
        Encrypt:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /crypto/encrypt
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        External:
          - crypto-utils
        EntryPoints: 
        - index.ts

  # 解密函数
  DecryptFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: decrypt/
      Handler: index.lambdaHandler
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KMSKeyId
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      Policies:
        - KMSDecryptPolicy:
            KeyId: !Ref KMSKeyId
        - Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
              Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
      Events:
        Decrypt:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /crypto/decrypt
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        External:
          - crypto-utils
        EntryPoints: 
        - index.ts

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiKeyId:
    Description: "API Key ID"
    Value: !Ref ApiKey
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  EncryptApi:
    Description: "API Gateway endpoint URL for Prod stage for Encrypt function"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/crypto/encrypt/"
  DecryptApi:
    Description: "API Gateway endpoint URL for Prod stage for Decrypt function"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/crypto/decrypt/"
